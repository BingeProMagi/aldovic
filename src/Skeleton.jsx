/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useState } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'

export default function Model(props) {
    const group = useRef()
    const { nodes, materials, animations } = useGLTF('/skeleton.glb')
    const { actions } = useAnimations(animations, group)
    console.log(actions)

    const [isHovered, setIsHovered] = useState(false);
    const wave = 'CharacterArmature|CharacterArmature|CharacterArmature|Wave|CharacterArmature|Wave'
    useEffect(() => {
        
        if (actions[wave]) {
            if (isHovered) {
                actions[wave].play()
            } else {
                actions[wave].stop()
            }
        }   

    }, [actions, isHovered])
  return (
    <group 
        ref={group} 
        {...props} 
        dispose={null}
        onPointerOver={() => setIsHovered(true)}
        onPointerOut={() => setIsHovered(false)}   
    >
      <group name="Root_Scene">
        <group name="RootNode">
          <group name="CharacterArmature" rotation={[-Math.PI / 2, 0, 0]} scale={150}>
            <primitive object={nodes.Root} />
          </group>
          <skinnedMesh
            name="Skeleton"
            geometry={nodes.Skeleton.geometry}
            material={materials.AtlasMaterial}
            skeleton={nodes.Skeleton.skeleton}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/skeleton.glb')
